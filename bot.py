# bot.py
import asyncio
from datetime import datetime, date
import logging

from aiogram import Bot, Dispatcher, types, F
from aiogram.client.bot import DefaultBotProperties
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from apscheduler.schedulers.asyncio import AsyncIOScheduler

import config
import db
from states import AddHabitFlow, ScheduleFlow, NoteFlow

logging.basicConfig(level=logging.INFO)

# Bot with default HTML parse mode
bot = Bot(token=config.BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())

# ---------------- Utility ----------------
DAYS_RU = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]

def schedule_days_keyboard():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=DAYS_RU[i], callback_data=f"schedule_day:{i}") for i in range(4)],
        [InlineKeyboardButton(text=DAYS_RU[i], callback_data=f"schedule_day:{i}") for i in range(4,7)]
    ])
    return kb

def habits_keyboard_with_actions(habits):
    # returns InlineKeyboardMarkup: each row has two buttons: Done and Delete
    rows = []
    for h in habits:
        done_btn = InlineKeyboardButton(text="‚úÖ –°–¥–µ–ª–∞–Ω–æ", callback_data=f"done:{h['id']}")
        del_btn = InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"del:{h['id']}")
        rows.append([done_btn, del_btn])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def notes_with_delete_keyboard(notes):
    kb_rows = []
    for n in notes:
        kb_rows.append([InlineKeyboardButton(text=f"–£–¥–∞–ª–∏—Ç—å #{n['id']}", callback_data=f"delnote:{n['id']}")])
    return InlineKeyboardMarkup(inline_keyboard=kb_rows) if kb_rows else None

# ---------------- Handlers ----------------
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/addhabit ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É\n"
        "/listhabits ‚Äî —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫\n"
        "/delhabit &lt;id&gt; ‚Äî —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É\n"
        "/stats &lt;id&gt; ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–≤—ã—á–∫–µ\n\n"
        "/editschedule ‚Äî –¥–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ (–≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å)\n"
        "/viewschedule ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n"
        "/delschedule ‚Äî —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–Ω—è (–≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å)\n\n"
        "/addnote ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
        "/listnotes ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫\n\n"
    )
    await message.answer(text)

# -------- Habits --------
@dp.message(Command("addhabit"))
async def cmd_addhabit(message: types.Message, state: FSMContext):
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏ (–∫–æ—Ä–æ—Ç–∫–æ):")
    await state.set_state(AddHabitFlow.waiting_name)

@dp.message(AddHabitFlow.waiting_name)
async def process_habit_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if not name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return
    hid = await db.add_habit(name)
    await message.answer(f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ <b>{name}</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞ (id={hid}).")
    await state.clear()

@dp.message(Command("listhabits"))
async def cmd_listhabits(message: types.Message):
    habits = await db.list_habits()
    if not habits:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –î–æ–±–∞–≤—å —á–µ—Ä–µ–∑ /addhabit")
        return

    # Build rich list with stats
    lines = ["<b>üìã –¢–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏:</b>\n"]
    for h in habits:
        st = await db.habit_stats(h["id"])
        lines.append(f"<b>{h['id']}. {h['name']}</b>\n–í—Å–µ–≥–æ: {st['total']} ‚Ä¢ –°–µ—Ä–∏—è: {st['streak']}\n")
    text = "\n".join(lines)
    await message.answer(text, reply_markup=habits_keyboard_with_actions(habits))

@dp.callback_query(F.data.startswith("done:"))
async def cb_done(callback: types.CallbackQuery):
    hid = int(callback.data.split(":",1)[1])
    ok = await db.mark_done(hid)
    if ok:
        await callback.answer("–û—Ç–º–µ—á–µ–Ω–æ ‚úÖ", show_alert=False)
        # respond without HTML issues (we don't use raw < >)
        await callback.message.answer(f"–ü—Ä–∏–≤—ã—á–∫–∞ <b>{hid}</b> –æ—Ç–º–µ—á–µ–Ω–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.")
    else:
        await callback.answer("–£–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è.", show_alert=True)

@dp.callback_query(F.data.startswith("del:"))
async def cb_delete_habit(callback: types.CallbackQuery):
    hid = int(callback.data.split(":",1)[1])
    ok = await db.delete_habit(hid)
    if ok:
        await callback.answer("–ü—Ä–∏–≤—ã—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞.", show_alert=False)
        await callback.message.answer(f"üóë –ü—Ä–∏–≤—ã—á–∫–∞ <b>{hid}</b> —É–¥–∞–ª–µ–Ω–∞.")
        # optionally update the message with keyboard removal
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except:
            pass
    else:
        await callback.answer("–ù–µ –Ω–∞—à—ë–ª –ø—Ä–∏–≤—ã—á–∫—É.", show_alert=True)

@dp.message(Command("delhabit"))
async def cmd_delhabit(message: types.Message):
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /delhabit &lt;id&gt;")
        return
    try:
        hid = int(parts[1])
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π id.")
        return
    ok = await db.delete_habit(hid)
    if ok:
        await message.answer(f"üóë –ü—Ä–∏–≤—ã—á–∫–∞ #{hid} —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await message.answer("–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫—É—é –ø—Ä–∏–≤—ã—á–∫—É.")

@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /stats &lt;id&gt;")
        return
    try:
        hid = int(parts[1])
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π id.")
        return
    st = await db.habit_stats(hid)
    text = (
        f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–≤—ã—á–∫–µ #{hid}</b>\n\n"
        f"–í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {st['total']}\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑: {st['last_done'] or '–Ω–∏–∫–æ–≥–¥–∞'}\n"
        f"–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è (streak): {st['streak']}"
    )
    await message.answer(text)

# -------- Schedule (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤) --------
@dp.message(Command("editschedule"))
async def cmd_editschedule(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:", reply_markup=schedule_days_keyboard())

@dp.callback_query(F.data.startswith("schedule_day:"))
async def cb_schedule_day(callback: types.CallbackQuery, state: FSMContext):
    idx = int(callback.data.split(":",1)[1])
    await state.update_data(schedule_day=idx)
    await state.set_state(ScheduleFlow.waiting_text)
    await callback.message.answer(f"–û—Ç–ø—Ä–∞–≤—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–Ω—è <b>{DAYS_RU[idx]}</b>.\n–ú–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1) –ê–ª–≥–µ–±—Ä–∞ ‚Äî 8:30).")
    await callback.answer()

@dp.message(ScheduleFlow.waiting_text)
async def process_schedule_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    day_idx = data.get("schedule_day")
    text = message.text.strip()
    if not text:
        await message.answer("–¢–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π ‚Äî –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return
    await db.set_schedule_for_day(day_idx, text)
    await message.answer(f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è <b>{DAYS_RU[day_idx]}</b> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
    await state.clear()

@dp.message(Command("viewschedule"))
async def cmd_viewschedule(message: types.Message):
    rows = await db.list_all_schedules()
    if not rows:
        await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å —á–µ—Ä–µ–∑ /editschedule")
        return
    lines = []
    for r in rows:
        lines.append(f"<b>{DAYS_RU[r['day_of_week']]}</b>:\n{r['text']}\n")
    await message.answer("\n".join(lines))

@dp.message(Command("delschedule"))
async def cmd_delschedule(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å:", reply_markup=schedule_days_keyboard())

@dp.callback_query(F.data.startswith("schedule_day:"))
async def cb_delschedule_and_edit(callback: types.CallbackQuery, state: FSMContext):
    # This handler is already used for editschedule flow; we need to distinguish context.
    # We'll check FSM state: if user is not in ScheduleFlow.waiting_text, then we assume delete operation.
    cur_state = await state.get_state()
    idx = int(callback.data.split(":",1)[1])
    if cur_state == ScheduleFlow.waiting_text.state:
        # handled by editschedule flow above
        return
    # Otherwise treat as delete request
    ok = await db.delete_schedule_for_day(idx)
    if ok:
        await callback.answer(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {DAYS_RU[idx]} —É–¥–∞–ª–µ–Ω–æ.", show_alert=False)
        await callback.message.answer(f"üóë –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è <b>{DAYS_RU[idx]}</b> —É–¥–∞–ª–µ–Ω–æ.")
    else:
        await callback.answer("–ù–µ –Ω–∞—à—ë–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è.", show_alert=True)

# -------- Notes (–∑–∞–º–µ—Ç–∫–∏) --------
@dp.message(Command("addnote"))
async def cmd_addnote(message: types.Message):
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:")
    await dp.current_state(user=message.from_user.id).set_state(NoteFlow.waiting_text)

@dp.message(NoteFlow.waiting_text)
async def process_note_text(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if not text:
        await message.answer("–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.")
        return
    nid = await db.add_note(text)
    await message.answer(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (#{nid}). –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –µ—ë –≤ 15:00, 18:00 –∏ 21:00 –ø–æ –ê—Å—Ç–∞–Ω–µ.")
    await state.clear()

@dp.message(Command("listnotes"))
async def cmd_listnotes(message: types.Message):
    notes = await db.list_notes()
    if not notes:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫. –î–æ–±–∞–≤—å /addnote")
        return
    text = "<b>–ó–∞–º–µ—Ç–∫–∏:</b>\n\n" + "\n".join([f"#{n['id']}: {n['content']}" for n in notes])
    kb = notes_with_delete_keyboard(notes)
    await message.answer(text, reply_markup=kb)

@dp.callback_query(F.data.startswith("delnote:"))
async def cb_delnote(callback: types.CallbackQuery):
    nid = int(callback.data.split(":",1)[1])
    ok = await db.delete_note(nid)
    if ok:
        await callback.answer("–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞.", show_alert=False)
        await callback.message.answer(f"–ó–∞–º–µ—Ç–∫–∞ #{nid} —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await callback.answer("–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫—É—é –∑–∞–º–µ—Ç–∫—É.", show_alert=True)

# ---------------- Scheduled jobs ----------------
async def send_morning_digest():
    today_idx = date.today().weekday()
    schedule_text = await db.get_schedule_for_day(today_idx)
    habits = await db.list_habits()

    parts = []
    parts.append("üåÖ <b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!</b>\n")
    if schedule_text:
        parts.append(f"<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({DAYS_RU[today_idx]}):</b>\n{schedule_text}\n")
    else:
        parts.append(f"<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({DAYS_RU[today_idx]}):</b>\n‚Äî –ø—É—Å—Ç–æ. /editschedule —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å\n")

    if habits:
        parts.append("<b>–ü—Ä–∏–≤—ã—á–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n" + "\n".join([f"{h['id']}. {h['name']}" for h in habits]))
    else:
        parts.append("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. /addhabit —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å.")

    text = "\n".join(parts)
    try:
        if habits:
            await bot.send_message(config.CHAT_ID, text, reply_markup=habits_keyboard_with_actions(habits))
        else:
            await bot.send_message(config.CHAT_ID, text)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", e)

async def send_notes_reminder():
    notes = await db.get_all_notes_texts()
    if not notes:
        return
    lines = ["‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è / –ó–∞–º–µ—Ç–∫–∏</b>\n"]
    for n in notes:
        lines.append(f"#{n['id']}: {n['content']}")
    text = "\n\n".join(lines)
    try:
        await bot.send_message(config.CHAT_ID, text)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–º–µ—Ç–æ–∫: %s", e)

async def daily_cleanup_notes_job():
    removed = await db.cleanup_old_notes(3)
    if removed:
        logging.info("Cleanup: —É–¥–∞–ª–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫ —Å—Ç–∞—Ä—à–µ 3 –¥–Ω–µ–π: %d", removed)

# ---------------- Startup / Scheduler ----------------
async def main():
    await db.init_db_pool()
    scheduler = AsyncIOScheduler(timezone=config.TIMEZONE)
    # –£—Ç—Ä–æ ‚Äî 07:00
    scheduler.add_job(send_morning_digest, "cron", hour=7, minute=0)
    # –ó–∞–º–µ—Ç–∫–∏ ‚Äî 15:00, 18:00, 21:00
    scheduler.add_job(send_notes_reminder, "cron", hour=15, minute=0)
    scheduler.add_job(send_notes_reminder, "cron", hour=18, minute=0)
    scheduler.add_job(send_notes_reminder, "cron", hour=21, minute=0)
    # Cleanup notes once a day (00:05)
    scheduler.add_job(daily_cleanup_notes_job, "cron", hour=0, minute=5)
    scheduler.start()
    try:
        logging.info("Bot started")
        await dp.start_polling(bot)
    finally:
        await bot.session.close()
        await scheduler.shutdown()

if __name__ == "__main__":
    asyncio.run(main())
